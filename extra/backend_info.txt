Webhook => https://be7.in/winapi.php

<?php
// ==== SHOW ERRORS ====
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// ==== CORS HEADERS ====
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: GET, POST, OPTIONS");
header("Access-Control-Allow-Headers: Content-Type");
header("Content-Type: application/json");

// ==== CONFIG ====
$host = "localhost"; 
$dbname = "u240376517_awin";
$username = "u240376517_awin";
$password = "bBVXzj7M/";

// ==== CONNECT ====
$conn = new mysqli($host, $username, $password, $dbname);
if ($conn->connect_error) {
    die(json_encode(["status"=>"error","message"=>"DB Connection Failed: " . $conn->connect_error]));
}

// ==== HELPER FUNCTION ====
function response($status, $message, $data = null) {
    echo json_encode(["status"=>$status, "message"=>$message, "data"=>$data]);
    exit;
}

// ==== API ROUTES ====
$action = $_GET['action'] ?? '';

switch($action) {
    // 1️⃣ CREATE USER
 case "create_user":
    // 1️⃣ Generate token and get IP/ref
    $token = bin2hex(random_bytes(8));
    $ip = $_SERVER['REMOTE_ADDR'] ?? '0.0.0.0';
    $invited_by = isset($_GET['ref']) && $_GET['ref'] !== '' ? (int)$_GET['ref'] : null;

    // 2️⃣ Start transaction
    $conn->begin_transaction();

    try {
        $inviter_exists = false;

        // 3️⃣ Check if inviter exists
        if ($invited_by) {
            $chk = $conn->prepare("SELECT id FROM users WHERE id = ? LIMIT 1");
            $chk->bind_param("i", $invited_by);
            $chk->execute();
            $chk->store_result();
            if ($chk->num_rows === 1) {
                $inviter_exists = true;
            } else {
                // inviter not found, treat as null
                $invited_by = null;
            }
            $chk->close();
        }

        // 4️⃣ Insert new user
        if ($inviter_exists) {
            $stmt = $conn->prepare("INSERT INTO users (token, ip, invited_by) VALUES (?, ?, ?)");
            $stmt->bind_param("ssi", $token, $ip, $invited_by);
        } else {
            $stmt = $conn->prepare("INSERT INTO users (token, ip, invited_by) VALUES (?, ?, NULL)");
            $stmt->bind_param("ss", $token, $ip);
        }

        if (!$stmt->execute()) {
            $conn->rollback();
            response("error", "Insert failed: " . $stmt->error);
            $stmt->close();
            break;
        }

        $new_user_id = $stmt->insert_id;
        $stmt->close();

        // 5️⃣ Increment inviter count safely
        if ($inviter_exists) {
            $upd = $conn->prepare("UPDATE users SET invited_to = invited_to + 1 WHERE id = ?");
            $upd->bind_param("i", $invited_by);
            if (!$upd->execute()) {
                $conn->rollback();
                $upd->close();
                response("error", "Failed to update inviter count: " . $conn->error);
                break;
            }
            $upd->close();
        }

        // 6️⃣ Commit transaction
        $conn->commit();

        // 7️⃣ Send success response
        response("success", "User created", [
            "user_id"    => $new_user_id,
            "token"      => $token,
            "ip"         => $ip,
            "invited_by" => $inviter_exists ? (string)$invited_by : null
        ]);
    } catch (Exception $e) {
        $conn->rollback();
        response("error", "Exception: " . $e->getMessage());
    }
    break;


    // 2️⃣ UPDATE USER
    case "update_user":
        $user_id = $_POST['user_id'] ?? 0;
        if (!$user_id) response("error", "user_id required");

        $fields = [];
        foreach ($_POST as $key=>$val) {
            if ($key != "user_id") {
                $val = $conn->real_escape_string($val);
                $fields[] = "$key = '$val'";
            }
        }

        if (empty($fields)) response("error", "No fields to update");

        $sql = "UPDATE users SET ".implode(", ", $fields)." WHERE id=$user_id";
        if ($conn->query($sql)) {
            response("success", "User updated");
        } else {
            response("error", "Query Failed: " . $conn->error);
        }
        break;

    // 3️⃣ GET USER (with transactions)
    case "get_user":
        $user_id = $_GET['user_id'] ?? 0;
        if (!$user_id) response("error", "user_id required");

        $sql = "SELECT * FROM user_view WHERE id = $user_id";
        $result = $conn->query($sql);
        if (!$result || $result->num_rows == 0) {
            response("error", "User not found");
        }

        $user = $result->fetch_assoc();

        $tx_sql = "SELECT id, amount, type, note, created_on FROM transactions WHERE user_id = $user_id ORDER BY id DESC";
        $tx_result = $conn->query($tx_sql);

        $transactions = [];
        if ($tx_result && $tx_result->num_rows > 0) {
            while ($row = $tx_result->fetch_assoc()) {
                $transactions[] = $row;
            }
        }

        response("success", "User details with transactions", [
            "user" => $user,
            "transactions" => $transactions
        ]);
        break;

    // 4️⃣ WITHDRAW REQUEST
    case "withdraw_request":
        $user_id = $_POST['user_id'] ?? 0;
        $amount = $_POST['amount'] ?? 0;

        if (!$user_id || !$amount || $amount <= 0) {
            response("error", "user_id and valid amount required");
        }

        $check = $conn->query("SELECT id FROM users WHERE id = $user_id");
        if (!$check || $check->num_rows == 0) {
            response("error", "User not found");
        }

        $note = "Withdrawal Request";
        $sql = "INSERT INTO transactions (user_id, amount, type, note, created_on)
                VALUES ($user_id, $amount, 'debit', '$note', NOW())";

        if ($conn->query($sql)) {
            response("success", "Withdrawal request added", [
                "transaction_id" => $conn->insert_id,
                "amount" => $amount,
                "type" => "debit",
                "note" => $note
            ]);
        } else {
            response("error", "Query Failed: " . $conn->error);
        }
        break;

    // 5️⃣ GOT CLICK (increment click count)
    case "got_click":
        $user_id = $_GET['id'] ?? 0;
        if (!$user_id) response("error", "id required");

        // increase clicks by 1
        $sql = "UPDATE users SET clicks = clicks + 1 WHERE id = $user_id";
        if (!$conn->query($sql)) {
            response("error", "Failed to update clicks: " . $conn->error);
        }
            response("success", "Click updated successfully");

        break;

    // 6️⃣ DEFAULT
    default:
        response("error", "Invalid action. Use ?action=create_user | update_user | get_user | withdraw_request | got_click");
}
?>
